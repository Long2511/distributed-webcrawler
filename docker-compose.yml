version: '3'

services:
  # Redis service for crawler coordination
  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - crawler_network
    restart: unless-stopped

  # ZooKeeper service for Kafka
  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"
    networks:
      - crawler_network
    restart: unless-stopped

  # Kafka message broker
  kafka:
    image: wurstmeister/kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: ${DOCKER_HOST_IP:-localhost} # Set this to your machine's IP address
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      KAFKA_CREATE_TOPICS: "crawler-tasks:4:1" # Format: topic-name:partitions:replicas
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - zookeeper
    networks:
      - crawler_network
    restart: unless-stopped

  # MongoDB for storing crawled data
  mongodb:
    image: mongo:latest
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_DATABASE: webcrawler
    volumes:
      - mongodb_data:/data/db
    networks:
      - crawler_network
    restart: unless-stopped

  # Kafdrop - Kafka Web UI (Optional but useful for monitoring)
  kafdrop:
    image: obsidiandynamics/kafdrop
    restart: unless-stopped
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: kafka:9092
      JVM_OPTS: "-Xms32M -Xmx64M"
    depends_on:
      - kafka
    networks:
      - crawler_network

  # MongoDB Express - MongoDB Web UI (Optional)
  mongo-express:
    image: mongo-express
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_SERVER: mongodb
    depends_on:
      - mongodb
    networks:
      - crawler_network

networks:
  crawler_network:
    driver: bridge

volumes:
  redis_data:
  mongodb_data:
